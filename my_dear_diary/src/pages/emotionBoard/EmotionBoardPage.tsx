// Í∞êÏ†ï Í≤åÏãúÌåê

import React, { useState, useEffect } from "react";
import "./EmotionBoard.scss";
import {
  Modal,
  Box,
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Tooltip,
} from "@mui/material";
import classNames from "classnames";

// Í∞êÏ†ï Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ Ï†ïÏùò
type EmotionEntry = {
  id: string;
  date: string;
  emotion: string;
  note?: string;
};

const emotionOptions = [
  "üòä Í∏∞ÏÅ®",
  "üò¢ Ïä¨Ìîî",
  "üò° Î∂ÑÎÖ∏",
  "üòå ÌèâÏò®",
  "üò± ÎÜÄÎûå",
  "ü•∞ ÏÇ¨Îûë",
];

const EmotionBoard: React.FC = () => {
  const [emotions, setEmotions] = useState<EmotionEntry[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedEmotion, setSelectedEmotion] = useState<EmotionEntry | null>(
    null
  );
  const [emotion, setEmotion] = useState("üòä Í∏∞ÏÅ®");
  const [note, setNote] = useState("");
  const [canAdd, setCanAdd] = useState(true);

  // APIÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (Read)
  useEffect(() => {
    fetch("http://localhost:5000/emotions")
      .then((res) => res.json())
      .then((data) => {
        setEmotions(data);
        // Ïò§Îäò ÎÇ†ÏßúÏóê Îì±Î°ùÎêú Í∞êÏ†ïÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        const today = new Date().toISOString().split("T")[0];
        setCanAdd(!data.some((entry: EmotionEntry) => entry.date === today));
      });
  }, []);

  // Í∞êÏ†ï Ï∂îÍ∞Ä ÎòêÎäî ÏàòÏ†ï (Create & Update)
  const handleSave = async () => {
    const today = new Date().toISOString().split("T")[0];
    if (selectedEmotion) {
      // Update (ÏàòÏ†ï)
      await fetch(`http://localhost:5000/emotions/${selectedEmotion.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ...selectedEmotion, emotion, note }),
      });
    } else {
      // Create (ÏÉàÎ°úÏö¥ Í∞êÏ†ï Ï∂îÍ∞Ä)
      const newEntry = {
        id: String(Date.now()),
        date: today,
        emotion,
        note,
      };
      await fetch("http://localhost:5000/emotions", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newEntry),
      });

      setEmotions((prev) => [...prev, newEntry]); // Î∞îÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
      setCanAdd(false);
    }

    // Î≥ÄÍ≤ΩÎêú Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Î∂àÎü¨Ïò§Í∏∞
    fetch("http://localhost:5000/emotions")
      .then((res) => res.json())
      .then((data) => setEmotions(data));

    closeModal();
  };

  // Í∞êÏ†ï ÏÇ≠Ï†ú (Delete)
  const handleDelete = async (id: string) => {
    await fetch(`http://localhost:5000/emotions/${id}`, { method: "DELETE" });
    setEmotions(emotions.filter((entry) => entry.id !== id));

    // ÏÇ≠Ï†ú ÌõÑ Ïò§Îäò ÎÇ†ÏßúÏùò Í∞êÏ†ïÏù¥ ÏóÜÏúºÎ©¥ Îì±Î°ù Î≤ÑÌäº ÌôúÏÑ±Ìôî
    const today = new Date().toISOString().split("T")[0];
    setCanAdd(
      !emotions.some((entry) => entry.id !== id && entry.date === today)
    );
  };

  const openModal = (emotion?: EmotionEntry) => {
    setSelectedEmotion(emotion || null);
    setEmotion(emotion?.emotion || "üòä Í∏∞ÏÅ®");
    setNote(emotion?.note || "");
    setIsModalOpen(true);
  };

  const closeModal = () => setIsModalOpen(false);

  return (
    <div className="emotion-board">
      <h2>
        Í∞êÏ†ï Îã§Ïù¥Ïñ¥Î¶¨
        <Tooltip
          title={canAdd ? "" : "ü©∑ Ïò§ÎäòÏùò Í∞êÏ†ïÏùÄ Ïù¥ÎØ∏ Îì±Î°ùÎêòÏñ¥ ÏûàÏñ¥Ïöî ü©∑"}
          placement="bottom-start"
          arrow
          disableHoverListener={canAdd}
        >
          <span>
            <button
              className={classNames("add-button", { disabled: !canAdd })}
              onClick={() => openModal()}
              disabled={!canAdd}
            >
              Îì±Î°ù
            </button>
          </span>
        </Tooltip>
      </h2>

      <div className="emotion-grid">
        {emotions.map((entry) => (
          <div key={entry.id} className="emotion-card">
            <div className="emotion-header">
              {entry.emotion}
              <div className="card-buttons">
                <button
                  className="edit-button"
                  onClick={() => openModal(entry)}
                >
                  ÏàòÏ†ï
                </button>
                <button
                  className="delete-button"
                  onClick={() => handleDelete(entry.id)}
                >
                  ÏÇ≠Ï†ú
                </button>
              </div>
            </div>
            <div className="emotion-body">
              <p className="date">{entry.date}</p>
              <p className="note">{entry.note}</p>
            </div>
          </div>
        ))}
      </div>

      <Modal open={isModalOpen} onClose={closeModal}>
        <Box className="modal-box">
          <h3>{selectedEmotion ? "Í∞êÏ†ï ÏàòÏ†ï" : "Í∞êÏ†ï Îì±Î°ù"}</h3>
          <FormControl fullWidth margin="normal" variant="outlined">
            <InputLabel shrink={!!emotion}>Í∞êÏ†ï ÏÑ†ÌÉù</InputLabel>
            <Select
              value={emotion}
              onChange={(e) => setEmotion(e.target.value)}
              displayEmpty
            >
              {emotionOptions.map((emo, index) => (
                <MenuItem key={index} value={emo}>
                  {emo}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          <TextField
            label="Î©îÎ™® ÏûÖÎ†•"
            value={note}
            onChange={(e) => setNote(e.target.value)}
            fullWidth
            margin="normal"
            multiline
            rows={3}
          />
          <div className="modal-buttons">
            <Button
              variant="contained"
              className="save-button"
              onClick={handleSave}
            >
              Ï†ÄÏû•
            </Button>
            <Button
              variant="outlined"
              className="cancel-button"
              onClick={closeModal}
            >
              Ï∑®ÏÜå
            </Button>
          </div>
        </Box>
      </Modal>
    </div>
  );
};

export default EmotionBoard;
